/*
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version. You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

package org.aitools.programd.server.servlet;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;

import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletOutputStream;

import java.io.PrintWriter;
import java.rmi.server.UID;

import org.UoR.secureAjax.UUIDgenerator;
import org.aitools.programd.Core;
import org.aitools.programd.server.ServletRequestTransactionEnvelope;
import org.aitools.programd.server.ServletRequestResponderManagerRegistry;
import org.aitools.programd.util.DeveloperError;
import org.aitools.programd.util.UserError;

/**
 * <p>
 * This is the chat servlet used to broker a conversation from a client. 
 * </p>
 * <ol>
 * <li>Determining the type of client requesting a bot response (via
 * User-Agent)</li>
 * <li>Obtaining a bot response from the Graphmaster</li>
 * <li>Forwarding the bot response to the appropriate Responder</li>
 * </ol>
 * 
 * @author Karsten Oster Lundqvist
 * @author <a href="mailto:k.o.lundqvist@rdg.ac.uk">Karsten Oster Lundqvist</a>
 */




public class Chatter extends HttpServlet
{
	private static final long serialVersionUID = 1930595076L;
	
	/** The string &quot;{@value}&quot;. */
    private static final String CORE = "core";
    
    /** The string &quot;{@value}&quot;. */
    private static final String RESPONDER_REGISTRY = "responder-registry";

    /** The Core to use. */
    private Core core;

    /** The ServletRequestResponderManagerRegistry to use. */
    private ServletRequestResponderManagerRegistry responderRegistry;
    
    /** An empty string. */
    private static final String EMPTY_STRING = "";

    /** The connect string. */
    private static String connectString="CONNECT";

    /** The inactivity string. */
    private static String inactivityString;

    /** The name of the text parameter in a request (&quot;text&quot;). */
    private static final String TEXT_PARAM = "text";

    /** The name of the userid parameter in a request (&quot;userid&quot;). */
    private static final String USERID_PARAM = "userid";

    /** The name of the botid parameter in a request (&quot;botid&quot;). */
    private static final String BOTID_PARAM = "botid";

    /**
     * The name of the response encoding parameter in a request
     * (&quot;response_encoding&quot;).
     */
    private static final String RESPONSE_ENCODING_PARAM = "response_encoding";

    /** The string &quot;{@value}&quot; (for character encoding conversion). */
    private static final String ENC_8859_1 = "8859_1";

    /** The string &quot;{@value}&quot; (for character encoding conversion). */
    private static final String ENC_UTF8 = "utf-8";

    /** The string &quot;{@value}&quot;. */
    private static final String TEMPLATE = "template";
    
    private int userid_num = 1;
    
    private HashMap<String,String> userSessions = new HashMap<String,String>();
    
    private UUIDgenerator UUIDgen;
    
    private String serverURL = "SCHERMERHOM:8081"; //name of your machine with port

    /**
     * @see javax.servlet.GenericServlet#init()
     */
    public void init()
    {
        this.core = (Core) this.getServletContext().getAttribute(CORE);
        this.responderRegistry = (ServletRequestResponderManagerRegistry) this.getServletContext().getAttribute(RESPONDER_REGISTRY);
        
        serverURL = this.core.getHostname();
        try
        {
        	UUIDgen = new UUIDgenerator();
        } catch (Exception e)
        {
        	e.printStackTrace();
        }
    }

    /**
     * @see javax.servlet.GenericServlet#init(javax.servlet.ServletConfig)
     */
    public void init(ServletConfig config)
    {
        this.core = (Core) config.getServletContext().getAttribute(CORE);
        this.responderRegistry = (ServletRequestResponderManagerRegistry) config.getServletContext().getAttribute(RESPONDER_REGISTRY);
        
        serverURL = this.core.getHostname();
        try
        {
        	UUIDgen = new UUIDgenerator();
        } catch (Exception e)
        {
        	e.printStackTrace();
        }
    }


    /**
     * @see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest,
     *      javax.servlet.http.HttpServletResponse)
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response)
    {
    	String userid = request.getParameter("userid");
    	String userRequest = request.getParameter("text");
    	String givenSessionID = request.getHeader("x-session");
    	    	
    	if(userid==null)
    	{
    		userid = "test" + userid_num;
    		userid_num++;
    	}
    	
    	if(userRequest==null)
    	{
    		String sessionID = UUIDgen.generateKey().toString();
    		userSessions.put(userid,sessionID);
    		
    		try{
    			PrintWriter pw=response.getWriter();
    		
    			pw.write(/*"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"" +
    					"\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">" +
    					"<html xmlns=\"http://www.w3.org/1999/xhtml\">"+*/
    			"<head>"+
    			"	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />"+
    			"	<script language=\"JavaScript\">"+
    			"var http_request = false;" +
    			"var sessionID = '" + sessionID + "';" +
    		        	
    			"function inputChat(url,parameters) {"+	
    			"	http_request = false;"+

    			"	if (window.XMLHttpRequest) {"+
    		    "    	http_request = new XMLHttpRequest();"+
    			"		if (http_request.overrideMimeType) {"+
    			"			http_request.overrideMimeType('text/xml');"+
    			"		}"+
    			"	} else if (window.ActiveXObject) {"+
    			"		try {"+
    			"			http_request = new ActiveXObject(\"Msxml2.XMLHTTP\");"+
    			"		} catch (e) {"+
    			"			try {"+
    			"				http_request = new ActiveXObject(\"Microsoft.XMLHTTP\");"+
    			"			} catch (e) {}"+
    			"		}"+
    			"	}"+

    			"	if (!http_request) {"+
    		    "   	alert('Cannot create an XMLHTTP instance');"+
    			"		return false;"+
    			"	}"+
    		        
    			"	http_request.open('POST', url, true);"+
    			"	http_request.onreadystatechange = alertContents;"+
    			"	http_request.setRequestHeader('Content-Type','application/x-www-form-urlencoded');"+
    			"	http_request.setRequestHeader('X-Session', sessionID);"+
    			"	http_request.send(parameters);"+
    			"	parent.inputFrame.document.inputArea.btnChat.value='WAIT';"+
    			"	parent.inputFrame.document.inputArea.btnChat.disabled=true;"+
    			"	parent.inputFrame.document.inputArea.inputText.disabled=true;"+	
    			"}"+
    			
    			"function alertContents() {"+
    			"	if (http_request.readyState == 4) {"+
    			"		if (http_request.status == 200) {"+
    						
    			"			printChat('<h5>TF:</h5>'+ http_request.responseText);"+
    			
    			"			parent.textFrame.scrollTo(0,10000);"+
    						
    			"			parent.inputFrame.document.inputArea.btnChat.value='SEND';"+
    			"			parent.inputFrame.document.inputArea.btnChat.disabled=false;"+
    			"			parent.inputFrame.document.inputArea.inputText.disabled=false;"+
    			"			parent.inputFrame.document.inputArea.inputText.focus();"+
    						
    			"		} else {"+
    			"			alert('There was a problem with the request.');"+
    			"		}"+
    			"	}"+
    			"}"+
    			
    			
    			"function printChat(str) {"+
    				
    			"parent.textFrame.document.body.innerHTML = parent.textFrame.document.body.innerHTML + str+'<br/>';"+
    			"}"+
    			
    			"function getChat() {"+
    			"	if(parent.inputFrame.document.inputArea.inputText.value!='') {"+    			
    			"		printChat('<h5>YOU:</h5>'+parent.inputFrame.document.inputArea.inputText.value);"+
    			"		var postStr = 'text=' + encodeURI(parent.inputFrame.document.inputArea.inputText.value ) + '&userid=" + userid +"';"+
    			"		parent.inputFrame.document.inputArea.inputText.value='';"+
    			"		inputChat('http://" + serverURL + "/chat/Chatter',postStr);"+
    			"	}"+
    			"}"+
    			
    			"function init(){"+
    			"	parent.textFrame.document.open();"+
    			"	parent.textFrame.document.close();"+
    			"	inputChat('http://" + serverURL + "/chat/Chatter','text=CONNECT&userid=" + userid +"');"+
    			"}"+
    			
    			"function exit(){"+
    			"	inputChat('http://" + serverURL + "/chat/Chatter','userid=" + userid +"');"+
    			"}"+
    			    			
    			"	</script>"+
    			"</head>"+
    			"<frameset rows=\"*,50\" onload=\"init()\">"+
    			"	<frame src=\"extraFrame.html\" name=\"textFrame\" scrolling=\"yes\" />"+
    			"	<frame src=\"inputFrame.html\" name=\"inputFrame\" scrolling=\"no\" />"+
    			"</frameset>"+
    		"</html>");
    			pw.flush();
    			pw.close();
    		}catch(Exception e)
    		{
    			e.printStackTrace();
    		}
    	}
    	
    	if(userid!=null && userRequest!=null)
    	{
        	String knownSessionID = userSessions.get(userid);
        	
        	//Make sure !knownSessionID.equals(givenSessionID) is true 
        	if(knownSessionID==null)
        	{
        		if (givenSessionID==null)
        			knownSessionID = "NOT";
        		else
        			knownSessionID = givenSessionID + "NOT";
        	}
        	
        	//Somebody is cheating!!
        	if(!knownSessionID.equals(givenSessionID)) {
				ServletOutputStream serviceOutputStream;
				try
				{
					serviceOutputStream = response.getOutputStream();
				}
				catch (IOException e)
				{
					throw new DeveloperError("Error getting service response output stream.", e);
				}
				
				String Response = "<h2>Something has gone wrong</h2> Please mail me the details of your session: k.o.lundqvist@rdg.ac.uk";
				
				try
				{
					serviceOutputStream.write(Response.getBytes());
				}
				catch (UnsupportedEncodingException e0)
				{
					throw new UserError("UTF-8 encoding is not supported on your platform!", e0);
				}
				catch (IOException e1)
				{
					throw new DeveloperError("Error writing to service output stream.", e1);
				}
				try
				{
					serviceOutputStream.flush();
				}
				catch (IOException e)
				{
					throw new DeveloperError("Error flushing service output stream.", e);
				}
				try
				{
					serviceOutputStream.close();
				}
				catch (IOException e)
				{
					throw new DeveloperError("Error closing service output stream.", e);
				}
				return;
        	}
    		
    		
            try
            {
            	String botid = request.getParameter(BOTID_PARAM);
            	String responseEncoding = request.getParameter(RESPONSE_ENCODING_PARAM);

                // If no text parameter then we assume a new connection.
                if (userRequest == null)
                {
                    userRequest = connectString;
                }
                // Check for blank request.
                else if (userRequest.equals(EMPTY_STRING))
                {
                    userRequest = inactivityString;
                }
                // Convert to UTF-8.
                else
                {
                    try
                    {
                        userRequest = new String(userRequest.getBytes(ENC_8859_1), ENC_UTF8);
                    }
                    catch (UnsupportedEncodingException e)
                    {
                        throw new DeveloperError("Encodings are not properly supported!", e);
                    }
                }

                // If no response encoding specified, use UTF-8.
                if (responseEncoding == null)
                {
                    responseEncoding = ENC_UTF8;
                }

                // Check for no userid.
                if (userid == null)
                {
                    userid = request.getRemoteHost();
                }

                // Check for no bot id.
                if (botid == null)
                {
                    botid = this.core.getBots().getABot().getID();
                }

                // Look for a named template.
                String templateName = request.getParameter(TEMPLATE);
                if (templateName == null)
                {
                    templateName = EMPTY_STRING;
                }

                ServletOutputStream serviceOutputStream;
                try
                {
                	serviceOutputStream = response.getOutputStream();
                }
                catch (IOException e)
                {
                    throw new DeveloperError("Error getting service response output stream.", e);
                }

                String botResponse = this.core.getResponse(userRequest, userid, botid);

                try
                {
                    serviceOutputStream.write(botResponse.getBytes(responseEncoding));
                }
                catch (UnsupportedEncodingException e0)
                {
                    throw new UserError("UTF-8 encoding is not supported on your platform!", e0);
                }
                catch (IOException e1)
                {
                    throw new DeveloperError("Error writing to service output stream.", e1);
                }
                try
                {
                    serviceOutputStream.flush();
                }
                catch (IOException e)
                {
                    throw new DeveloperError("Error flushing service output stream.", e);
                }
                try
                {
                    serviceOutputStream.close();
                }
                catch (IOException e)
                {
                    throw new DeveloperError("Error closing service output stream.", e);
                }
            }
            catch (Throwable e)
            {
                this.core.fail(e);
            }
    	}
    }

    /**
     * @see javax.servlet.http.HttpServlet#doPost(javax.servlet.http.HttpServletRequest,
     *      javax.servlet.http.HttpServletResponse)
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response)
    {
        doGet(request, response);
    }
}