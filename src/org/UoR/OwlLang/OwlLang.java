/* Generated By:JavaCC: Do not edit this line. OwlLang.java */

/*
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version. You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

package org.UoR.OwlLang;


import java.io.*;
import java.util.*;
import java.util.regex.*;

//Libraries used to communicate with ontologies.
import com.hp.hpl.jena.ontology.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.util.iterator.* ;
import org.UoR.GrammaCheck.*;

public class OwlLang implements OwlLangConstants {
        public static class Types
        {
                public static final int CLASS = 0;
                public static final int PROPERTY = 1;
                public static final int INDIVIDUAL = 2;
        }
        private int investigateType;

        private ArrayList ONTresult;
        private OntModel ontmodel;
        private String base;
        private String prefix;
        private GrammaCheck gramma;

        private Random rand;

        private String thatReturn="";

        /**An unknown AIML input*/
        protected static final String O_UNKNOWN = "UNKNOWN";

        //URI of rdfs:label is the default return string of any resource in an OntModel
        protected static final String defaultReturnString = "rdfs:label";

        public OwlLang(OntModel ontmodel, String baseURI)
        {
                this(new StringReader("test"));

                Long seed = System.nanoTime();
                this.rand = new Random(seed);

                this.ontmodel = ontmodel;

                base = "BASE <" + baseURI + ">\n";
                prefix = "";
                setLabeledPrefix("rdfs","http://www.w3.org/2000/01/rdf-schema#");
                setLabeledPrefix("owl","http://www.w3.org/2002/07/owl#");

                gramma = new GrammaCheck();
    }

        public void setLabeledPrefix(String label, String URI)
        {
                this.prefix += "PREFIX " + label + ": <" + URI + "> \n";
        }


        public String query(String input) throws ParseException
        {
                thatReturn="";
                ONTresult = new ArrayList();
                StringReader inp = new StringReader(input);
                this.ReInit(inp);
                String res = this.OntQue();
                return res;
        }

        public String getThatReturn()
        {
                return this.thatReturn;
        }

        private Object getSingleObject(Set possibleInstances)
        {
                Object winner = null;;

                if (possibleInstances.size()!=0)
                {
                        Object [] res = possibleInstances.toArray();
                        winner = res[this.rand.nextInt(possibleInstances.size())];
                }

                return winner;
        }


        private String getPropertyVal(String subject, String property, String stringToken)
        {
                if(property==null) return subject;

                String queryString =
                        base + prefix +
                        "SELECT ?str " +
                        "WHERE { " + subject + " " + property + " ?str . }";

                Query query = QueryFactory.create(queryString);
                QueryExecution qe = QueryExecutionFactory.create(query,ontmodel);
                ResultSet rs = qe.execSelect();

                HashSet solutions = new HashSet();

                for (;rs.hasNext();)
                {
                        QuerySolution qs = rs.nextSolution();
                        RDFNode rn = qs.get("str");
                        if(rn.isLiteral())
                        {
                                String lang = ((Literal)rn).getLanguage();
                                if(lang==null && stringToken==null)
                                        solutions.add("\"" + ((Literal)rn).getLexicalForm() + "\"");
                                else
                                        if(lang!=null && stringToken!=null)
                                        {
                                                if(lang.equals(stringToken))
                                                        solutions.add("\"" + ((Literal)rn).getLexicalForm() + "\"");
                                        }
                        }
                        else
                                solutions.add("<" + ((Resource)rn).getURI() + ">");
                }

                qe.close();

                if(solutions.size()==0) return "\"" + O_UNKNOWN + "\"";
                Object [] reses = solutions.toArray();
                String res = (String)reses[this.rand.nextInt(solutions.size())];

                return res ;
        }

        private String getString(Token t)
        {
                if(t==null)
                        return null;
                else
                        return t.image.substring(1,t.image.length()-1);
        }

        private int getNumber(Token t) throws ParseException
        {
                if(t!=null)
                        return Integer.parseInt(t.image.substring(1));
                else
                        throw new ParseException("null pointer error in getNumber(Token t)");
        }

        private String getURI(Token t)
        {
                if(t!=null)
                        return "<" + ontmodel.expandPrefix(getString(t)) + ">";
                else
                        return null;
        }

        private String getURI(String s)
        {
                if(s==null)
                        return null;
                else
                        return "<" + ontmodel.expandPrefix(s) + ">";
        }

        private String getAIMLURI(String s)
        {
                s = getPureURI(s);
                return ontmodel.shortForm(s);
        }

        private String getPureURI(String str)
        {
                if(str==null)
                        return null;
                String foo = str.substring(1,str.length()-1);
                return  ontmodel.expandPrefix(foo);
        }

        private String getPureURIfromAIML(String str)
        {
                if(str==null)
                        return null;

                String foo = str.substring(1,str.length()-1);

                if(!foo.contains(":"))
                {
                        int pos = foo.indexOf(" ");

                        if(pos==-1)
                                return ontmodel.expandPrefix(":" + foo);

                        foo = foo.substring(0,pos) + ":" + foo.substring(pos+1);
                }

                return ontmodel.expandPrefix(foo);
        }

        private String getPureURIfromAIML(Token t)
        {

                if(t==null)
                        return null;

                return getPureURIfromAIML(t.image);
        }

        private String getFullString(String propValue,String stringToken)
        {
                if(propValue==null)
                        return null;

                if(stringToken!=null)
                        return " \"" + propValue + "\"@" + stringToken;
                else
                        return " \"" + propValue + "\"";
        }

        private Set getSetFromIterator(Iterator i)
        {
                HashSet res = new HashSet();

                for(;i.hasNext();)
                {
                        String id = ((Resource)i.next()).getURI();
                        if(id!=null)
                        {
                                id=getURI(id);
                                res.add(id);
                        }
                }

                return res;
        }

        private boolean isStringInSet(String test, Set set)
        {
                if(test==null)
                        return false;

                return set.contains(test);
        }

        private ExtendedIterator iteratorOverDomain(Resource res)
        {
                String URI = res.getURI();

                if(URI!=null)
                {
                        SingletonIterator si = new SingletonIterator(res);
                        return si;
                }

                try
                {
                        ExtendedIterator ni = new NiceIterator();

                        UnionClass uc = (UnionClass)res.as(UnionClass.class);
                        Iterator i = uc.listOperands();
                        for(;i.hasNext();)
                        {
                                Resource next = (Resource)i.next();
                                ni = ni.andThen(iteratorOverDomain(next));
                        }

                        return ni;
                } catch(Exception e)
                {
                        return null;
                }
        }

        private Set getCLSes(String propName,Token cType,String propValue) throws ParseException
        {
                Set solutions = new HashSet();

                if(propName==null)
                {
                        solutions = new HashSet();
                        OntClass oc = ontmodel.getOntClass(getPureURI(propValue));
                        if(oc!=null)
                        {
                                String id = oc.getURI();
                                if(id!=null)
                                {
                                        id = getURI(id);
                                        solutions.add(id);
                                }
                        }
                }
                else
                {
                        String queryString =
                                base + prefix +
                                "SELECT ?cls\n" +
                                "WHERE { ?cls a owl:Class . ?cls " + propName + " " + propValue + " . }";

                        Query query = QueryFactory.create(queryString);

                        // Execute the query and obtain results
                        QueryExecution qe = QueryExecutionFactory.create(query, ontmodel);
                        ResultSet results = qe.execSelect();

                        for(;results.hasNext();)
                        {
                                QuerySolution qs = results.nextSolution();
                                Resource rn = qs.getResource("cls");
                                if(rn!=null)
                                {
                                        String id = rn.getURI();
                                        if(id!=null)
                                        {
                                                id = getURI(id);
                                                solutions.add(getURI(id));
                                        }
                                }
                        }

                        // Free up resources used running the query
                        qe.close();
                }

                //Add subclasses to solution
                if(cType.image.equals("+="))
                {
                        Iterator i = solutions.iterator();
                        for(;i.hasNext();)
                        {
                                OntClass oc = ontmodel.getOntClass(getPureURI((String)i.next()));
                                if(oc!=null)
                                {
                                        Iterator ei = oc.listSubClasses();
                                        Set subClasses = getSetFromIterator(ei);
                                        solutions.add(subClasses);
                                }
                        }
                }

                //It's a negation
                if(cType.image.equals("!="))
                {
                        Set results = new HashSet();
                        Iterator ei = ontmodel.listClasses();
                        Set allClasses = getSetFromIterator(ei);
                        allClasses.removeAll(solutions);
                        solutions = allClasses;
                }

                switch (investigateType)
                {
                        case Types.CLASS:
                                return solutions;

                        case Types.PROPERTY:
                                Set result = new HashSet();
                                Iterator i = solutions.iterator();
                                for(;i.hasNext();)
                                {
                                        OntClass oc = ontmodel.getOntClass(getPureURI((String)i.next()));
                                        if(oc!=null)
                                        {
                                                Iterator pi = oc.listDeclaredProperties();
                                                result.addAll(getSetFromIterator(pi));
                                        }
                                }
                                return result;

                        case Types.INDIVIDUAL:
                                result = new HashSet();
                                i = solutions.iterator();
                                for(;i.hasNext();)
                                {
                                        OntClass oc = ontmodel.getOntClass(getPureURI((String)i.next()));
                                        if(oc!=null)
                                        {
                                                Iterator ii = oc.listInstances();
                                                result.addAll(getSetFromIterator(ii));
                                        }
                                }
                                return result;

                        default:
                                throw new ParseException("Illigal investigation type in cls call");
                }
        }

        private Set getPROPERTYs(String propName,Token cType,String propValue, Token t,String indSlotName,Token indType,String indValue) throws ParseException
        {
                Set solutions = new HashSet();

                if(propName==null)
                {
                        solutions = new HashSet();
                        OntProperty op = ontmodel.getOntProperty(getPureURI(propValue));
                        if(op!=null)
                        {
                                String id = op.getURI();
                                if(id!=null)
                                {
                                        id = getURI(id);
                                        solutions.add(id);
                                }
                        }
                }
                else
                {
                        String queryString =
                                base + prefix +
                                "SELECT ?prop\n" +
                                "WHERE { ?s ?prop ?o . ?prop " + propName + " " + propValue + " . }";

                        Query query = QueryFactory.create(queryString);

                        // Execute the query and obtain results
                        QueryExecution qe = QueryExecutionFactory.create(query, ontmodel);
                        ResultSet results = qe.execSelect();

                        for(;results.hasNext();)
                        {
                                QuerySolution qs = results.nextSolution();
                                Resource rn = qs.getResource("prop");
                                if(rn!=null)
                                {
                                        String id = rn.getURI();

                                        if(id!=null)
                                        {
                                                id = getURI(id);
                                                solutions.add(id);
                                        }
                                }

                        }

                        // Free up resources used running the query
                        qe.close();
                }

                //It's a negation
                if(cType.image.equals("!="))
                {
                        Set res = new HashSet();
                        ExtendedIterator iP = ontmodel.listObjectProperties();
                        ExtendedIterator iProp = iP.andThen(ontmodel.listDatatypeProperties());
                        res.addAll(getSetFromIterator(iProp));
                        res.removeAll(solutions);
                        solutions=res;
                }

                switch (investigateType)
                {
                        case Types.CLASS:
                                //Returns domain class of Property
                                Set result = new HashSet();
                                Iterator i = solutions.iterator();
                                for(;i.hasNext();)
                                {
                                        OntProperty op = ontmodel.getOntProperty(getPureURI((String)i.next()));
                                        if(op!=null)
                                        {
                                                Iterator pi = ((OntProperty)op).listDeclaringClasses();
                                                for(;pi.hasNext();)
                                                {
                                                        Resource prop = (Resource)pi.next();
                                                        if(prop!=null)
                                                        {
                                                                Iterator iprop = iteratorOverDomain(prop);
                                                                result.addAll(getSetFromIterator(iprop));
                                                        }
                                                }
                                        }
                                }
                                return result;

                        case Types.PROPERTY:
                                if(t==null)
                                        return solutions;

                                result = new HashSet();
                                Set negationSet = new HashSet();

                                i=solutions.iterator();
                                for(;i.hasNext();)
                                {
                                        String queryString;

                                        String nextProp = (String)i.next();
                                        if(indType.image.equals("!="))
                                        {
                                                queryString = base + prefix + "SELECT ?ind\n";
                                                if(indSlotName==null)
                                                        queryString += "WHERE { ?ind " + nextProp + " ?object . }";
                                                else
                                                        queryString += "WHERE { ?ind " + nextProp + " ?o .\n?o " + indSlotName + " ?object . }";

                                                Query query = QueryFactory.create(queryString);
                                                // Execute the query and obtain results
                                                QueryExecution qe = QueryExecutionFactory.create(query, ontmodel);
                                                ResultSet rs = qe.execSelect();

                                                for(;rs.hasNext();)
                                                {
                                                        QuerySolution qs = rs.nextSolution();
                                                        Resource rn = qs.getResource("ind");

                                                        if(rn!=null)
                                                        {
                                                                Iterator iprop = iteratorOverDomain(rn);
                                                                negationSet.addAll(getSetFromIterator(iprop));
                                                        }
                                                }

                                                qe.close();
                                        }

                                        queryString = base + prefix + "SELECT ?ind\n";
                                        if(indSlotName==null)
                                                queryString += "WHERE { ?ind " + nextProp + " " + indValue + " . }";
                                        else
                                                queryString += "WHERE { ?ind " + nextProp + " ?o .\n?o " + indSlotName + " " + indValue + " . }";

                                        Query query = QueryFactory.create(queryString);
                                        // Execute the query and obtain results
                                        QueryExecution qe = QueryExecutionFactory.create(query, ontmodel);
                                        ResultSet rs = qe.execSelect();

                                        for(;rs.hasNext();)
                                        {
                                                QuerySolution qs = rs.nextSolution();
                                                Resource rn = qs.getResource("ind");

                                                if(rn!=null)
                                                {
                                                        Iterator iprop = iteratorOverDomain(rn);
                                                        result.addAll(getSetFromIterator(iprop));
                                                }
                                        }

                                        qe.close();
                                }

                                if(indType.image.equals("=="))
                                        return result;
                                else
                                {
                                        negationSet.removeAll(result);
                                        return negationSet;
                                }



                        case Types.INDIVIDUAL:
                                result = new HashSet();

                                if(t!=null)
                                {
                                        negationSet = new HashSet();

                                        i=solutions.iterator();
                                        for(;i.hasNext();)
                                        {
                                                String queryString;

                                                String nextProp = (String)i.next();
                                                if(indType.image.equals("!="))
                                                {
                                                        queryString = base + prefix + "SELECT ?ind\n";
                                                        if(indSlotName==null)
                                                                queryString += "WHERE { ?ind " + nextProp + " ?object . }";
                                                        else
                                                                queryString += "WHERE { ?ind " + nextProp + " ?o .\n?o " + indSlotName + " ?object . }";

                                                        Query query = QueryFactory.create(queryString);

                                                        // Execute the query and obtain results
                                                        QueryExecution qe = QueryExecutionFactory.create(query, ontmodel);
                                                        ResultSet rs = qe.execSelect();

                                                        for(;rs.hasNext();)
                                                        {
                                                                QuerySolution qs = rs.nextSolution();
                                                                Resource rn = qs.getResource("ind");

                                                                if(rn!=null)
                                                                {
                                                                        Iterator iprop = iteratorOverDomain(rn);
                                                                        negationSet.addAll(getSetFromIterator(iprop));
                                                                }
                                                        }

                                                        qe.close();
                                                }

                                                queryString = base + prefix + "SELECT ?ind\n";
                                                if(indSlotName==null)
                                                        queryString += "WHERE { ?ind " + nextProp + " " + indValue + " . }";
                                                else
                                                        queryString += "WHERE { ?ind " + nextProp + " ?o .\n?o " + indSlotName + " " + indValue + " . }";

                                                Query query = QueryFactory.create(queryString);

                                                // Execute the query and obtain results
                                                QueryExecution qe = QueryExecutionFactory.create(query, ontmodel);
                                                ResultSet rs = qe.execSelect();

                                                for(;rs.hasNext();)
                                                {
                                                        QuerySolution qs = rs.nextSolution();
                                                        Resource rn = qs.getResource("ind");

                                                        if(rn!=null)
                                                        {
                                                                Iterator iprop = iteratorOverDomain(rn);
                                                                result.addAll(getSetFromIterator(iprop));
                                                        }
                                                }

                                                qe.close();
                                        }

                                        if(indType.image.equals("=="))
                                                return result;
                                        else
                                        {
                                                negationSet.removeAll(result);
                                                return negationSet;
                                        }
                                }

                                Set classResult = new HashSet();
                                i = solutions.iterator();
                                for(;i.hasNext();)
                                {
                                        OntProperty op = ontmodel.getOntProperty(getPureURI((String)i.next()));
                                        if(op!=null)
                                        {
                                                Iterator pi = ((OntProperty)op).listDeclaringClasses();
                                                classResult.addAll(getSetFromIterator(pi));
                                        }
                                }

                                i = classResult.iterator();
                                for(;i.hasNext();)
                                {
                                        try
                                        {
                                                Iterator iclasses = iteratorOverDomain((Resource)i.next());

                                                for(;iclasses.hasNext();)
                                                {
                                                        Resource clsRes = (Resource)iclasses.next();

                                                        if(clsRes!=null)
                                                        {
                                                                OntClass oc = ontmodel.getOntClass(((Resource)clsRes).getURI());
                                                                if(oc!=null)
                                                                {
                                                                        Iterator iIns = oc.listInstances();
                                                                        result.addAll(getSetFromIterator(iIns));
                                                                }
                                                        }
                                                }
                                        } catch(Exception e)
                                        {
                                        }
                                }

                                return result;

                        default:
                                throw new ParseException("Illigal investigation type in cls call");
                }
        }

        private Set getINDes(String propName,Token cType,String propValue) throws ParseException
        {
                if(investigateType==Types.PROPERTY)
                        return new HashSet();

                Set solutions = new HashSet();


                if(propName==null)
                {
                        solutions = new HashSet();
                        Individual oi = ontmodel.getIndividual(getPureURI(propValue));
                        if(oi!=null)
                        {
                                String id = oi.getURI();
                                if(id!=null)
                                {
                                        id = getURI(id);
                                        solutions.add(id);
                                }
                        }
                }
                else
                {
                        String queryString =
                                base + prefix +
                                "SELECT ?ind\n" +
                                "WHERE { ?ind a ?s . ?s a owl:Class . ?s rdfs:subClassOf owl:Thing . ?ind " + propName + " " + propValue + " . }";

                        Query query = QueryFactory.create(queryString);

                        // Execute the query and obtain results
                        QueryExecution qe = QueryExecutionFactory.create(query, ontmodel);
                        ResultSet results = qe.execSelect();

                        for(;results.hasNext();)
                        {
                                QuerySolution qs = results.nextSolution();
                                Resource rn = qs.getResource("ind");
                                if(rn!=null)
                                {
                                        String id = rn.getURI();
                                        if(id!=null)
                                        {
                                                id = getURI(id);
                                                solutions.add(id);
                                        }
                                }
                        }

                        // Free up resources used running the query
                        qe.close();
                }

                //It's a negation
                if(cType.image.equals("!="))
                {
                        Set res = new HashSet();

                        String queryString =
                                base + prefix +
                                "SELECT ?ind\n" +
                                "WHERE { ?ind a ?s . ?s a owl:Class . ?s rdfs:subClassOf owl:Thing . }";

                        Query query = QueryFactory.create(queryString);

                        // Execute the query and obtain results
                        QueryExecution qe = QueryExecutionFactory.create(query, ontmodel);
                        ResultSet results = qe.execSelect();

                        for(;results.hasNext();)
                        {
                                QuerySolution qs = results.nextSolution();
                                Resource rn = qs.getResource("ind");
                                String rnName = rn.getURI();

                                if(rnName!=null)
                                {
                                        rnName = getURI(rnName);
                                        res.add(rnName);
                                }
                        }

                        // Free up resources used running the query
                        qe.close();

                        res.removeAll(solutions);

                        solutions = res;
                }

                switch (investigateType)
                {
                        case Types.CLASS:
                                Set res = new HashSet();
                                Iterator i = solutions.iterator();
                                for(;i.hasNext();)
                                {
                                        String indURI = getPureURI((String)i.next());
                                        Individual ind = ontmodel.getIndividual(indURI);

                                        if(ind!=null)
                                        {
                                                Iterator iCls = ind.listRDFTypes(true);
                                                res.addAll(getSetFromIterator(iCls));
                                        }
                                }
                                return res;

                        case Types.INDIVIDUAL:
                                return solutions;

                        default:
                                throw new ParseException("Illigal investigation type in cls call");
                }
        }

        private Set getRESTs(Token cType,String propValue,Token t) throws ParseException
        {
                return null;
        }

        private Resource getUniqueResource(String str)
        {
                String uri = ontmodel.expandPrefix(":" + str);
                Resource res = ontmodel.createResource(uri);

                while(ontmodel.containsResource(res))
                {
                        uri = ontmodel.expandPrefix(":" + str + System.nanoTime());
                        res = ontmodel.createResource(uri);
                }

                return res;
        }

  final public String OntQue() throws ParseException {
        String res;
        Token t;
    t = jj_consume_token(ONTQUE);
    res = CommandList();
    ThatReturnPart();
    jj_consume_token(0);
                {if (true) return t.image + " " + res;}
    throw new Error("Missing return statement in function");
  }

//Returns the strin
  final public String CommandList() throws ParseException {
        String res,r1;
    jj_consume_token(LPAREN);
    res = CommandPart();
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      r1 = CommandPart();
                                                       res+=" "+r1;
    }
    jj_consume_token(RPAREN);
                {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

//Initiates the Collection to find depending on command
//Return a string with "<command-type> <single-fit from all possible>"
  final public String CommandPart() throws ParseException {
        String res,resIns, regMatch;
        Token uriToken = null;
        Set possibles = null;
        Token stringToken=null;

        Resource subj, pred;
        Resource say=null;
        RDFNode obj;
        RDFNode what=null;

        Token t;

        Token strg, exp;
    if (jj_2_5(3)) {
      res = Command();
      possibles = PredicateStatement();
      if (jj_2_2(3)) {
        jj_consume_token(COLON);
        uriToken = jj_consume_token(URI);
      } else {
        ;
      }
      if (jj_2_3(3)) {
        jj_consume_token(36);
        stringToken = jj_consume_token(STRING);
      } else {
        ;
      }
                String str = (String)getSingleObject(possibles);

                if(str!=null)
                {
                        resIns = getPropertyVal(str,getURI(getPureURIfromAIML(uriToken)), getString(stringToken));
                        ONTresult.add(resIns);
                        res +=" " + getAIMLURI(resIns);
                        {if (true) return res;}
                }
                else
                {
                        resIns = "'" + O_UNKNOWN + "'";
                        ONTresult.add(resIns);
                        res +=" " + getAIMLURI(resIns);
                        {if (true) return res;}
                }
    } else if (jj_2_6(3)) {
      jj_consume_token(ONTSTORE);
      jj_consume_token(LPAREN);
      subj = claimRefURI();
      pred = claimRefURI();
      obj = claimRefStringURI();
      if (jj_2_4(3)) {
        say = claimRefURI();
        what = claimRefStringURI();
      } else {
        ;
      }
      jj_consume_token(RPAREN);
                //TODO: Make generic. But first off ok.
                try
                {
                        if(say==null)
                        {
                                ontmodel.add(ontmodel.createStatement(subj,(Property)pred.as(Property.class),obj));

                                res = getURI(subj.getURI());
                                ONTresult.add(res);
                                {if (true) return "ONTSTORE " + getAIMLURI(res);}
                        }
                        else
                        {
                                java.util.List addStatements = new ArrayList();
                                
                                
                                //TODO: Change to generic
                                Resource claim = ontmodel.getResource("http://www.cs.rdg.ac.uk/webpageEval#Claim");
                                Property subject = ontmodel.getProperty("http://www.cs.rdg.ac.uk/webpageEval#subject");
                                Property predicate = ontmodel.getProperty("http://www.cs.rdg.ac.uk/webpageEval#predicate");
                                Property object = ontmodel.getProperty("http://www.cs.rdg.ac.uk/webpageEval#object");
                                Resource statement = ontmodel.getResource("http://www.w3.org/1999/02/22-rdf-syntax-ns#statement");
                                Property a = ontmodel.getProperty("http://www.w3.org/1999/02/22-rdf-syntax-ns#type");

                                Resource reifiedResource = getUniqueResource("CLAIM");

                                addStatements.add(ontmodel.createStatement(reifiedResource,a,claim));
                                addStatements.add(ontmodel.createStatement(reifiedResource,subject,subj));
                                addStatements.add(ontmodel.createStatement(reifiedResource,predicate,pred));
                                addStatements.add(ontmodel.createStatement(reifiedResource,object,obj));
                                addStatements.add(ontmodel.createStatement(reifiedResource,(Property)say.as(Property.class),what));
                                ontmodel.add(addStatements);

                                res = getURI(reifiedResource.getURI());
                                ONTresult.add(res);
                                {if (true) return "ONTSTORE " + getAIMLURI(res);}
                        }
                }catch(Exception e)
                {
                        {if (true) throw new ParseException("Type mismatch in ONTCLAIM");}
                }
    } else if (jj_2_7(3)) {
      jj_consume_token(ONTUR);
      jj_consume_token(LPAREN);
      t = jj_consume_token(STRING);
      jj_consume_token(RPAREN);
                Resource r = getUniqueResource(getString(t));
                res = getURI(r.getURI());
                ONTresult.add(res);
                {if (true) return "ONTUNIQUEID " + getAIMLURI(res);}
    } else if (jj_2_8(3)) {
      jj_consume_token(ONTISR);
      jj_consume_token(LPAREN);
      t = jj_consume_token(URI);
      jj_consume_token(RPAREN);
                String URI = getPureURIfromAIML(t.image);
                Resource r = ontmodel.createResource(URI);

                URI = getURI(URI);
                ONTresult.add(URI);

                if (ontmodel.containsResource(r))
                        {if (true) return "ONTISRESOURCE " + getAIMLURI(URI);}
                else
                        {if (true) return "ONTISRESOURCE " + O_UNKNOWN ;}
    } else if (jj_2_9(3)) {
      jj_consume_token(ONTGRAMMA);
      jj_consume_token(LPAREN);
      strg = jj_consume_token(STRING);
      jj_consume_token(RPAREN);
                String string = getString(strg);
                boolean b = gramma.isStringValid(string);

                if(b)
                {
                        ONTresult.add(string);
                        {if (true) return "ONTGRAMMA " + string;}
                }
                else
                {
                        ONTresult.add("\"" + O_UNKNOWN +"\"");
                        {if (true) return "ONTGRAMMA " + "\"" + O_UNKNOWN + "\"";}
                }
    } else if (jj_2_10(3)) {
      jj_consume_token(ONTREGEX);
      jj_consume_token(LPAREN);
      strg = jj_consume_token(STRING);
      jj_consume_token(EQ);
      regMatch = RefStringURI();
      jj_consume_token(RPAREN);
                String string = getString(strg);
                Pattern p = Pattern.compile(string);
                Matcher m = p.matcher(regMatch);
                boolean b = m.matches();

                if(b)
                        {if (true) return "ONTREGEX TRUE";}
                else
                        {if (true) return "ONTREGEX FALSE";}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Resource claimRefURI() throws ParseException {
        Token t;
    if (jj_2_11(3)) {
      t = jj_consume_token(URI);
                String URI = getPureURIfromAIML(t.image);
                {if (true) return ontmodel.createResource(URI);}
    } else if (jj_2_12(3)) {
      t = jj_consume_token(REFNUMBER);
                int i = getNumber(t);
                try
                {
                        {if (true) return ontmodel.createResource(getPureURI((String)ONTresult.get(i-1)));}
                } catch(IndexOutOfBoundsException ie)
                {
                        {if (true) throw new ParseException("Reference out of bounds. #REF < " + ONTresult.size() + " expected.");}
                }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public RDFNode claimRefStringURI() throws ParseException {
        Token t;
        Token langToken = null;
        Token typeToken = null;
    if (jj_2_16(3)) {
      t = jj_consume_token(STRING);
      if (jj_2_15(3)) {
        if (jj_2_13(3)) {
          jj_consume_token(36);
          langToken = jj_consume_token(STRING);
        } else if (jj_2_14(3)) {
          jj_consume_token(37);
          typeToken = jj_consume_token(URI);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
                String rdfString = getString(t);

                try
                {
                        if(langToken!=null)
                        {
                                {if (true) return ontmodel.createLiteral(rdfString,getString(langToken));}
                        }

                        if(typeToken!=null)
                                {if (true) return ontmodel.createTypedLiteral(rdfString,getPureURIfromAIML(typeToken.image));}


                        {if (true) return ontmodel.createLiteral(rdfString);}
                }catch(Exception e)
                {
                        {if (true) throw new ParseException("Resource not properly defined.");}
                }
    } else if (jj_2_17(3)) {
      t = jj_consume_token(URI);
                String URI = getPureURIfromAIML(t.image);
                {if (true) return ontmodel.createResource(URI);}
    } else if (jj_2_18(3)) {
      t = jj_consume_token(REFNUMBER);
                int i = getNumber(t);
                try
                {
                        {if (true) return ontmodel.createResource(getPureURI((String)ONTresult.get(i-1)));}
                } catch(IndexOutOfBoundsException ie)
                {
                        {if (true) throw new ParseException("Reference out of bounds. #REF < " + ONTresult.size() + " expected.");}
                }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Command() throws ParseException {
        Token t;
    if (jj_2_19(3)) {
      t = jj_consume_token(ONTCLS);
                this.investigateType = Types.CLASS;
                {if (true) return t.image;}
    } else if (jj_2_20(3)) {
      t = jj_consume_token(ONTIND);
                this.investigateType = Types.INDIVIDUAL;
                {if (true) return t.image;}
    } else if (jj_2_21(3)) {
      t = jj_consume_token(ONTPRO);
                this.investigateType = Types.PROPERTY;
                {if (true) return t.image;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//Return Collection of possibles using logic between predicates
  final public Set PredicateStatement() throws ParseException {
        Set pos = null;
    jj_consume_token(LPAREN);
    pos = PredicateList();
    jj_consume_token(RPAREN);
                {if (true) return pos;}
    throw new Error("Missing return statement in function");
  }

  final public Set PredicateList() throws ParseException {
        Set pos = null;
    pos = PredicateXOR();
                {if (true) return pos;}
    throw new Error("Missing return statement in function");
  }

  final public Set PredicateXOR() throws ParseException {
        Set pos1 = null;
        Set pos2 = null;
        Set mpos = null;
    pos1 = PredicateOR();
    label_2:
    while (true) {
      if (jj_2_22(3)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(SC_XOR);
      pos2 = PredicateOR();
                if(mpos==null) mpos=pos1;

                HashSet dummy = new HashSet(mpos);
                dummy.retainAll(pos2);

                mpos.addAll(pos2);
                mpos.removeAll(dummy);
    }
                if(mpos==null) {if (true) return pos1;}
                {if (true) return mpos;}
    throw new Error("Missing return statement in function");
  }

  final public Set PredicateOR() throws ParseException {
        Set pos1 = null;
        Set pos2 = null;
        Set mpos = null;
    pos1 = PredicateAND();
    label_3:
    while (true) {
      if (jj_2_23(3)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(SC_OR);
      pos2 = PredicateAND();
                if(mpos==null) mpos=pos1;

                mpos.addAll(pos2);
    }
                if(mpos==null) {if (true) return pos1;}
                {if (true) return mpos;}
    throw new Error("Missing return statement in function");
  }

  final public Set PredicateAND() throws ParseException {
        Set pos1 = null;
        Set pos2 = null;
        Set mpos = null;
    pos1 = PredicateUNARY();
    label_4:
    while (true) {
      if (jj_2_24(3)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(SC_AND);
      pos2 = PredicateUNARY();
                if(mpos==null) mpos=pos1;

                mpos.retainAll(pos2);
    }
                if(mpos==null) {if (true) return pos1;}
                {if (true) return mpos;}
    throw new Error("Missing return statement in function");
  }

  final public Set PredicateUNARY() throws ParseException {
        Set pos;
    if (jj_2_25(3)) {
      pos = Predicate();
                {if (true) return pos;}
    } else if (jj_2_26(3)) {
      jj_consume_token(LPAREN);
      pos = PredicateList();
      jj_consume_token(RPAREN);
                {if (true) return pos;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//Return Collection of possibles
  final public Set Predicate() throws ParseException {
        Set pos=null;

        String propName=null;
        String propValue=null;
        String indSlotName=null;
        String indValue=null;

        Token t=null;
        Token cType;
        Token indType=null;
    if (jj_2_32(3)) {
      jj_consume_token(PROPERTY);
      if (jj_2_27(3)) {
        propName = ColonStringURI();
      } else {
        ;
      }
      cType = CheckType();
      propValue = RefStringURI();
      if (jj_2_29(3)) {
        t = jj_consume_token(GETIND);
        if (jj_2_28(3)) {
          indSlotName = ColonStringURI();
        } else {
          ;
        }
        indType = CheckType();
        indValue = RefStringURI();
      } else {
        ;
      }
                pos=getPROPERTYs(propName,cType,propValue,t,indSlotName, indType, indValue);
                {if (true) return pos;}
    } else if (jj_2_33(3)) {
      jj_consume_token(CLS);
      if (jj_2_30(3)) {
        propName = ColonStringURI();
      } else {
        ;
      }
      cType = ClsCheckType();
      propValue = RefStringURI();
                pos = getCLSes(propName,cType,propValue);
                {if (true) return pos;}
    } else if (jj_2_34(3)) {
      jj_consume_token(IND);
      if (jj_2_31(3)) {
        propName = ColonStringURI();
      } else {
        ;
      }
      cType = CheckType();
      propValue = RefStringURI();
                pos=getINDes(propName, cType,propValue);
                {if (true) return pos;}
    } else if (jj_2_35(3)) {
      jj_consume_token(REST);
      cType = CheckType();
      propValue = RefStringURI();
                pos=getRESTs(cType,propValue,t);
                {if (true) return pos;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token ClsCheckType() throws ParseException {
        Token t;
    if (jj_2_36(3)) {
      t = jj_consume_token(PLUSEQ);
                {if (true) return t;}
    } else if (jj_2_37(3)) {
      t = CheckType();
                {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token CheckType() throws ParseException {
        Token t;
    if (jj_2_38(3)) {
      t = jj_consume_token(EQ);
                {if (true) return t;}
    } else if (jj_2_39(3)) {
      t = jj_consume_token(NQ);
                {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String RefStringURI() throws ParseException {
        Token t;
        Token langToken = null;
        Token typeToken = null;
    if (jj_2_46(3)) {
      t = jj_consume_token(STRING);
      if (jj_2_42(3)) {
        if (jj_2_40(3)) {
          jj_consume_token(36);
          langToken = jj_consume_token(STRING);
        } else if (jj_2_41(3)) {
          jj_consume_token(37);
          typeToken = jj_consume_token(URI);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
                String retString = "\"" + getString(t) + "\"";

                if(langToken!=null)
                        {if (true) return retString + "@" + getString(langToken);}

                if(typeToken!=null)
                        {if (true) return retString + "^^" + getURI(getPureURIfromAIML(typeToken.image));}

                {if (true) return retString;}
    } else if (jj_2_47(3)) {
      t = jj_consume_token(URI);
                {if (true) return getURI(getPureURIfromAIML(t.image));}
    } else if (jj_2_48(3)) {
      t = jj_consume_token(REFNUMBER);
      if (jj_2_45(3)) {
        if (jj_2_43(3)) {
          jj_consume_token(36);
          langToken = jj_consume_token(STRING);
        } else if (jj_2_44(3)) {
          jj_consume_token(37);
          typeToken = jj_consume_token(URI);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
                int i = getNumber(t);
                try
                {
                        String retString = (String)ONTresult.get(i-1);
                        if(langToken!=null)
                        {
                                {if (true) return retString + "@" + getString(langToken);}
                        }

                        if(typeToken!=null)
                        {
                                {if (true) return retString + "^^" + getURI(getPureURIfromAIML(typeToken.image));}
                        }

                        {if (true) return retString;}
                } catch(IndexOutOfBoundsException ie)
                {
                        {if (true) throw new ParseException("Reference out of bounds. #REF < " + ONTresult.size() + " expected.");}
                }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String ColonStringURI() throws ParseException {
        String str;
    jj_consume_token(COLON);
    str = RefStringURI();
                {if (true) return str;}
    throw new Error("Missing return statement in function");
  }

  final public String ColonString() throws ParseException {
        Token t;
    jj_consume_token(COLON);
    t = jj_consume_token(STRING);
                {if (true) return getString(t);}
    throw new Error("Missing return statement in function");
  }

  final public void ThatReturnPart() throws ParseException {
        Token t;
    jj_consume_token(THAT);
    jj_consume_token(ASSIGN);
    t = jj_consume_token(STRING);
                this.thatReturn = getString(t);
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(ONTSTORE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(ONTPRO)) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(NQ)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_6()) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(ONTIND)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) return true;
    }
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(ONTREGEX)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(ONTCLS)) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_8()) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(URI)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) return true;
    }
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(PLUSEQ)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(ONTGRAMMA)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(URI)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(REFNUMBER)) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(URI)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(REST)) return true;
    if (jj_3R_16()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(ONTISR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(URI)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(36)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(IND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(36)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(URI)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(ONTUR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(CLS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_scan_token(36)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(SC_XOR)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(PROPERTY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(STRING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(URI)) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(GETIND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_scan_token(REFNUMBER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_scan_token(URI)) return true;
    return false;
  }

  final private boolean jj_3_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_scan_token(36)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(REFNUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(URI)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_scan_token(STRING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    return false;
  }

  public OwlLangTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[48];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public OwlLang(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OwlLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public OwlLang(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OwlLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public OwlLang(OwlLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(OwlLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[38];
    for (int i = 0; i < 38; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 48; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
